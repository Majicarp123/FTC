package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;

import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.Scalar;
import org.opencv.imgproc.Imgproc;
import org.openftc.easyopencv.OpenCvCamera;
import org.openftc.easyopencv.OpenCvCameraFactory;
import org.openftc.easyopencv.OpenCvCameraRotation;
import org.openftc.easyopencv.OpenCvPipeline;

@Autonomous(name = "AutonomousCode")
public class AutonomousCode extends LinearOpMode {
    DcMotor leftMotor, rightMotor, linearSlide;
    Servo servoClaw, servoTurn;
    String color;
    OpenCvCamera camera;
    ColorDetectionPipeline pipeline;

    @Override
    public void runOpMode() {
        leftMotor = hardwareMap.get(DcMotor.class, "leftmotor");
        rightMotor = hardwareMap.get(DcMotor.class, "rightmotor");
        linearSlide = hardwareMap.get(DcMotor.class, "linearslide");
        servoClaw = hardwareMap.get(Servo.class, "servoclaw");

        camera = OpenCvCameraFactory.getInstance().createWebcam((WebcamName) hardwareMap.get("Webcam 1"));
        pipeline = new ColorDetectionPipeline();
        camera.setPipeline(pipeline);
        camera.openCameraDevice();
        camera.startStreaming(320, 240, OpenCvCameraRotation.UPRIGHT);

        waitForStart();

        color = pipeline.getColorString();
        telemetry.addData("Color: ", color);
        telemetry.update();

        // rotate 35 degrees to the left
        leftMotor.setPower(0.5);
        rightMotor.setPower(-0.5);
        sleep(500);
        leftMotor.setPower(0);
        rightMotor.setPower(0);

        //drive forward 2 inches
        leftMotor.setPower(-0.5);
        rightMotor.setPower(-0.5);
        sleep(1000);
        leftMotor.setPower(0);
        rightMotor.setPower(0);

        //raise linear slide 14 inches
        linearSlide.setPower(1);
        sleep(14000);
        linearSlide.setPower(0);

        //open servo
        servoClaw.setPosition(1);

        if (color.equals("black")) {
            //drive to the left parking zone
            leftMotor.setPower(-0.5);
            rightMotor.setPower(-0.5);
            sleep(2000);
            leftMotor.setPower(0);
            rightMotor.setPower(0);
        } else if (color.equals("green")) {
            //drive to the middle parking zone
            leftMotor.setPower(-0.5);
            rightMotor.setPower(-0.5);
            sleep(4000);
            leftMotor.setPower(0);
            rightMotor.setPower(0);
        } else if (color.equals("purple")) {
            //drive to the right parking zone
            leftMotor.setPower(-0.5);
            rightMotor.setPower(-0.5);
            sleep(6000);
            leftMotor.setPower(0);
            rightMotor.setPower(0);
        }
        camera.stopStreaming();
        camera.closeCameraDevice();
    }

    class ColorDetectionPipeline extends OpenCvPipeline {
        Mat hsv = new Mat();
        Mat threshold = new Mat();
        String colorString = "";

        Scalar min = new Scalar(0, 0, 0);
        Scalar max = new Scalar(0, 0, 0);

        @Override
        public Mat processFrame(Mat input) {
            Imgproc.cvtColor(input, hsv, Imgproc.COLOR_RGB2HSV);
            Core.inRange(hsv, min, max, threshold);
            return threshold;
        }

        public String getColorString() {
            return colorString;
        }
    }
}
